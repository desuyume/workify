datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int            @id @default(autoincrement())
  login           String         @unique
  email           String         @unique
  name            String?
  birthday        DateTime?
  phone           String?
  description     String?
  avatar          String?
  specialisation  String?
  password        String
  rating          Float          @default(0)
  vacancies       Vacancy[]
  communication   Communication? @relation(fields: [communicationId], references: [id])
  communicationId Int?           @unique
  Feedback        Feedback[]

  @@map("users")
}

model Communication {
  id             Int     @id @default(autoincrement())
  isEmailVisible Boolean @default(false)
  isPhoneVisible Boolean @default(false)
  User           User?
}

model City {
  name       String    @unique
  subject    String
  population Int       @default(0)
  Vacancy    Vacancy[]

  @@map("cities")
}

model Vacancy {
  id               Int              @id @default(autoincrement())
  title            String
  category         VacancyCategory? @relation(fields: [vacancyCategoryId], references: [id])
  cover            String?
  photos           VacancyPhoto[]
  description      String?          @db.VarChar(1500)
  price            Float?
  city             City?            @relation(fields: [cityName], references: [name])
  isLocationHidden Boolean          @default(false)
  isVacancyHidden  Boolean          @default(false)
  rating           Float            @default(0)

  user              User                @relation(fields: [userId], references: [id])
  vacancyCategoryId Int?
  userId            Int
  cityName          String?
  FeedbackOnVacancy FeedbackOnVacancy[]

  @@map("vacancies")
}

model VacancyCategory {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  vacancies Vacancy[]

  @@map("vacancy_categories")
}

model VacancyPhoto {
  id        Int      @id @default(autoincrement())
  url       String
  Vacancy   Vacancy? @relation(fields: [vacancyId], references: [id])
  vacancyId Int?

  @@map("vacancy_photos")
}

model Feedback {
  id                Int                 @id @default(autoincrement())
  comment           String?             @db.VarChar(1500)
  rating            Float               @default(0)
  photo             String?
  date_created      DateTime            @default(now())
  customer          User                @relation(fields: [customerId], references: [id])
  customerId        Int
  FeedbackOnVacancy FeedbackOnVacancy[]
}

model FeedbackOnVacancy {
  id         Int      @id @default(autoincrement())
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId Int
  vacancy    Vacancy  @relation(fields: [vacancyId], references: [id])
  vacancyId  Int
}
